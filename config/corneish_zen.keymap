/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD0";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;
        };

        td1: td1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD1";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&kp LEFT_GUI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bksp {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 21>;
            layers = <0 2 1 3 5 4>;
        };

        bi_h_00 {
            bindings = <&kp ESCAPE>;
            key-positions = <1 0>;
            layers = <0 2 3 5 4 6 7 1>;
        };

        bi_h_01 {
            bindings = <&kp DELETE>;
            key-positions = <2 1>;
            layers = <0 2 3 5 4 6 7>;
        };

        bi_h_02 {
            bindings = <&kp F11>;
            key-positions = <2 3>;
            layers = <0 2 3 5 4 6 7>;
        };

        bi_h_03 {
            bindings = <&kp F12>;
            key-positions = <3 4>;
            layers = <0 2 3 5 4 6 7>;
        };

        bi_h_04 {
            bindings = <&kp SCROLLLOCK>;
            key-positions = <5 4>;
            layers = <0 2 3 5 4 6 7 1>;
        };

        bi_m_01 {
            bindings = <&kp NUMBER_1>;
            key-positions = <13 14>;
            layers = <0 2 3 5 4 6 7>;
        };

        bi_m_02 {
            bindings = <&kp NUMBER_2>;
            key-positions = <14 15>;
            layers = <0 2 3 5 4 6 7>;
        };

        bi_m_03 {
            bindings = <&kp NUMBER_6>;
            key-positions = <15 16>;
            layers = <0 2 3 5 4 6 7>;
        };

        bi_m_04 {
            bindings = <&kp PAUSE_BREAK>;
            key-positions = <16 17>;
            layers = <0 2 3 5 4 6 7 1>;
        };

        bi_l_01 {
            bindings = <&kp NUMBER_4>;
            key-positions = <25 26>;
            layers = <0 2 3 5 4 6 7>;
        };

        bi_l_02 {
            bindings = <&kp NUMBER_3>;
            key-positions = <26 27>;
            layers = <0 2 3 5 4 6 7>;
        };

        bi_l_03 {
            bindings = <&kp N5>;
            key-positions = <27 28>;
            layers = <0 2 3 5 4 6 7>;
        };

        bi_l_04 {
            bindings = <&kp LC(LS(NUMBER_4))>;
            key-positions = <28 29>;
            layers = <0 2 3 5 4 6 7 1>;
        };

        ag_h_01 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <13 2>;
            layers = <0 2 3 5 4 6 7>;
        };

        ag_h_02 {
            bindings = <&kp KP_MINUS>;
            key-positions = <14 3>;
            layers = <0 2 3 5 4 6 7>;
        };

        ag_h_03 {
            bindings = <&kp KP_PLUS>;
            key-positions = <15 4>;
            layers = <0 2 3 5 4 6 7>;
        };

        ag_h_04 {
            bindings = <&none>;
            key-positions = <5 16>;
            layers = <0 2 3 5 4 6 7>;
        };

        ag_l_01 {
            bindings = <&kp N9>;
            key-positions = <14 25>;
            layers = <0 2 3 5 4 6 7>;
        };

        ag_l_02 {
            bindings = <&kp N7>;
            key-positions = <26 15>;
            layers = <0 2 3 5 4 6 7>;
        };

        ag_l_03 {
            bindings = <&kp N8>;
            key-positions = <16 27>;
            layers = <0 2 3 5 4 6 7>;
        };

        ag_l_04 {
            bindings = <&none>;
            key-positions = <17 28>;
            layers = <0 2 3 5 4 6 7>;
        };

        gr_h_00 {
            bindings = <&kp CAPSLOCK>;
            key-positions = <0 13>;
            layers = <0 2 3 5 4 6 7>;
        };

        gr_h_01 {
            bindings = <&kp GRAVE>;
            key-positions = <1 14>;
            layers = <0 2 3 5 4 6 7>;
        };

        gr_h_02 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <2 15>;
            layers = <0 2 3 5 4 6 7>;
        };

        gr_h_03 {
            bindings = <&kp KP_DOT>;
            key-positions = <3 16>;
            layers = <0 2 3 5 4 6 7>;
        };

        gr_h_04 {
            bindings = <&out OUT_TOG>;
            key-positions = <4 17>;
            layers = <0 2 3 5 4 6 7>;
        };

        gr_l_01 {
            bindings = <&kp MINUS>;
            key-positions = <13 26>;
            layers = <0 2 3 5 4 6 7>;
        };

        gr_l_02 {
            bindings = <&kp N0>;
            key-positions = <14 27>;
            layers = <0 2 3 5 4 6 7>;
        };

        gr_l_03 {
            bindings = <&kp EQUAL>;
            key-positions = <15 28>;
            layers = <0 2 3 5 4 6 7>;
        };

        gr_l_04 {
            bindings = <&sl 7>;
            key-positions = <16 29>;
            layers = <0 2 3 5 4 6 7>;
        };

        cr_h_01 {
            bindings = <&kp BACKSLASH>;
            key-positions = <13 2 15>;
            layers = <0 2 3 5 4 6 7>;
        };

        cr_h_02 {
            bindings = <&kp LG(A)>;
            key-positions = <14 3 16>;
            layers = <0 2 3 5 4 6 7>;
        };

        cr_h_03 {
            bindings = <&kp LG(UP_ARROW)>;
            key-positions = <17 4 15>;
            layers = <0 2 3 5 4 6 7>;
        };

        cr_l_01 {
            bindings = <&kp SLASH>;
            key-positions = <27 14 25>;
            layers = <0 2 3 5 4 6 7>;
        };

        cr_l_03 {
            bindings = <&kp LG(LEFT_ARROW)>;
            key-positions = <26 15 28>;
            layers = <0 2 3 5 4 6 7>;
        };

        cr_l_04 {
            bindings = <&kp LG(RIGHT_ARROW)>;
            key-positions = <29 16 27>;
            layers = <0 2 3 5 4 6 7>;
        };

        tri_h_00 {
            bindings = <&none>;
            key-positions = <0 1 2>;
            layers = <0 2 3 5 4 6 7>;
        };

        tri_h_01 {
            bindings = <&none>;
            key-positions = <1 2 3>;
            layers = <0 2 3 5 4 6 7>;
        };

        tri_h_02 {
            bindings = <&none>;
            key-positions = <2 3 4>;
            layers = <0 2 3 5 4 6 7>;
        };

        tri_h_03 {
            bindings = <&kp LG(C)>;
            key-positions = <4 5 3>;
            layers = <0 2 3 5 4 6 7>;
        };

        tri_m_01 {
            bindings = <&none>;
            key-positions = <13 14 15>;
            layers = <0 2 3 5 4 6 7>;
        };

        tri_m_02 {
            bindings = <&none>;
            key-positions = <14 15 16>;
            layers = <0 2 3 5 4 6 7>;
        };

        tri_m_03 {
            bindings = <&none>;
            key-positions = <15 16 17>;
            layers = <0 2 3 5 4 6 7>;
        };

        tri_l_01 {
            bindings = <&kp COMMA>;
            key-positions = <25 26 27>;
            layers = <0 2 3 5 4 6 7>;
        };

        tri_l_02 {
            bindings = <&kp PERIOD>;
            key-positions = <26 27 28>;
            layers = <0 2 3 5 4 6 7>;
        };

        tri_l_03 {
            bindings = <&none>;
            key-positions = <27 28 29>;
            layers = <0 2 3 5 4 6 7>;
        };
    };

    macros {
        UNDERPAINT: UNDERPAINT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(F) &kp LC(A) &kp DEL &kp F &kp R &kp O &kp M &kp COLON &kp M &kp E &kp D &kp I &kp Q &kp O &kp L &kp A &kp SPACE &kp H &kp A &kp S &kp COLON &kp I &kp M &kp A &kp G &kp E &kp ENTER>;
            label = "UNDERPAINT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "BASE";
            bindings = <
&kp TAB         &kp Q  &kp W  &kp E  &kp R         &kp T        &kp Y      &kp U  &kp I      &kp O    &kp P      &kp MINUS
&kp LEFT_SHIFT  &kp A  &kp S  &kp D  &kp F         &kp G        &kp H      &kp J  &kp K      &kp L    &kp APOS   &kp RSHFT
&kp LCTRL       &kp Z  &kp X  &kp C  &kp V         &kp B        &kp N      &kp M  &kp COMMA  &kp DOT  &kp SLASH  &mo 5
                              &td1   &kp LEFT_ALT  &kp SPACE    &kp ENTER  &mo 3  &mo 2
            >;
        };

        gaming {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "GAME";
        };

        numpad_media {
            display-name = "NUM";
            bindings = <
&kp KP_ENTER  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_N9        &kp KP_DIVIDE    &kp KP_NUM          &none   &none   &none   &kp C_MUTE            &kp C_VOL_DN          &kp C_VOL_UP
&mo 4         &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_N6        &kp KP_MULTIPLY  &none               &none   &none   &none   &kp C_PREVIOUS        &kp C_PLAY_PAUSE      &kp C_NEXT
&mo 3         &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_N0        &kp LS(LG(LEFT))    &none   &none   &none   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &none
                                                &trans           &trans           &trans              &trans  &tog 1  &trans
            >;
        };

        function_nav {
            display-name = "FUNCTION";
            bindings = <
&trans          &kp F7  &kp F8  &kp F9  &none    &none     &none   &none   &kp HOME        &kp UP_ARROW    &kp PAGE_UP    &kp PRINTSCREEN
&kp LEFT_SHIFT  &kp F4  &kp F5  &kp F6  &none    &none     &none   &none   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT      &kp RIGHT_SHIFT
&kp LCTRL       &kp F1  &kp F2  &kp F3  &kp F10  &none     &none   &none   &kp END         &kp INSERT      &kp PAGE_DOWN  &kp RIGHT_CONTROL
                                &trans  &trans   &trans    &trans  &trans  &trans
            >;
        };

        mirror {
            bindings = <
&none      &kp Y  &kp U  &kp I   &kp O   &kp P     &none   &none   &none   &none  &none  &none
&none      &kp H  &kp J  &kp K   &kp L   &none     &none   &none   &none   &none  &none  &none
&kp LCTRL  &kp N  &kp M  &none   &none   &none     &none   &none   &none   &none  &none  &none
                         &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "MIRROR";
        };

        symbol {
            bindings = <
&none  &none  &none  &none   &none   &none     &rgb_ug RGB_TOG  &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI
&none  &none  &none  &none   &none   &none     &none            &none            &none            &kp SEMICOLON    &kp COLON        &none
&none  &none  &none  &none   &none   &none     &none            &none            &none            &none            &kp BSLH         &none
                     &trans  &trans  &trans    &trans           &trans           &trans
            >;

            label = "SYMBOL";
        };

        STK_MEDIA {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;
        };

        STK_BT {
            bindings = <
&bt BT_CLR_ALL  &bt BT_CLR    &none         &none         &none  &none    &none  &none  &none  &none  &none  &none
&none           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none  &none    &none  &none  &none  &none  &none  &none
&none           &none         &none         &none         &none  &none    &none  &none  &none  &none  &none  &none
                                            &none         &none  &none    &none  &none  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
